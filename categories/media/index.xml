<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Media on 量子跳跃者</title><link>https://blog.ververv.com/categories/media/</link><description>Recent content in Media on 量子跳跃者</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 06 Mar 2020 07:58:58 +0800</lastBuildDate><atom:link href="https://blog.ververv.com/categories/media/index.xml" rel="self" type="application/rss+xml"/><item><title>音视频基础和思考</title><link>https://blog.ververv.com/p/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80%E5%92%8C%E6%80%9D%E8%80%83/</link><pubDate>Fri, 06 Mar 2020 07:58:58 +0800</pubDate><guid>https://blog.ververv.com/p/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80%E5%92%8C%E6%80%9D%E8%80%83/</guid><description>&lt;h2 id="总体层次">总体层次&lt;/h2>
&lt;p>&lt;img src="https://img-blog.csdn.net/20160118002918690"
loading="lazy"
alt="img"
>&lt;/p>
&lt;h2 id="直播vs点播">直播vs点播&lt;/h2>
&lt;p>云直播（LVB）、云点播（VOD）&lt;/p>
&lt;h2 id="传输协议">传输协议&lt;/h2>
&lt;h3 id="对比">对比&lt;/h3>
&lt;p>内容延迟：&lt;/p>
&lt;p>RTP &amp;gt; RTMP和HDL &amp;gt; HLS&lt;/p>
&lt;p>DASH不清楚&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>协议&lt;/th>
&lt;th>HDL(HTTP-FLV)&lt;/th>
&lt;th>RTMP&lt;/th>
&lt;th>HLS&lt;/th>
&lt;th>DASH&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>传输方式&lt;/td>
&lt;td>http流&lt;/td>
&lt;td>tcp流&lt;/td>
&lt;td>http&lt;/td>
&lt;td>http&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>视频封装格式&lt;/td>
&lt;td>flv&lt;/td>
&lt;td>flv tag&lt;/td>
&lt;td>Ts文件&lt;/td>
&lt;td>Mp4 3gp webm 切片&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>延时&lt;/td>
&lt;td>低&lt;/td>
&lt;td>低&lt;/td>
&lt;td>高&lt;/td>
&lt;td>高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据分段&lt;/td>
&lt;td>连续流&lt;/td>
&lt;td>连续流&lt;/td>
&lt;td>切片文件&lt;/td>
&lt;td>切片文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Html5播放&lt;/td>
&lt;td>可通过html5解封包播放(flv.js)&lt;/td>
&lt;td>不支持&lt;/td>
&lt;td>可通过(hls.js)&lt;/td>
&lt;td>直接播放或者html5解封包播放&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>直播协议&lt;/th>
&lt;th>优点&lt;/th>
&lt;th>缺点&lt;/th>
&lt;th>播放延迟&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>FLV&lt;/td>
&lt;td>成熟度高、高并发无压力&lt;/td>
&lt;td>需集成 SDK 才能播放&lt;/td>
&lt;td>2s - 3s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RTMP&lt;/td>
&lt;td>优质线路下理论延迟最低&lt;/td>
&lt;td>高并发情况下表现不佳&lt;/td>
&lt;td>1s - 3s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HLS（m3u8）&lt;/td>
&lt;td>手机浏览器支持度高&lt;/td>
&lt;td>延迟非常高&lt;/td>
&lt;td>10s - 30s&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="hdl-vs-rtmp">HDL vs RTMP&lt;/h4>
&lt;p>这两个协议实际上传输数据是一样的，&lt;strong>数据都是flv文件的tag&lt;/strong>。&lt;/p>
&lt;p>http_flv是一个无限大的http流的文件，相比rtmp就只能直播，而rtmp还可以推流和更多的操作。&lt;/p>
&lt;p>但是http有个好处，就是是以80http通信的，穿透性强，而且rtmp是非开放协议。&lt;/p>
&lt;p>这两个协议是如今直播平台主选的直播方式，主要原因就是延时极低。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/luconsole/p/6079534.html" target="_blank" rel="noopener"
>参考&lt;/a>&lt;/p>
&lt;h3 id="rtmp">RTMP&lt;/h3>
&lt;p>是Adobe的专利协议，现在大部分国外的CDN已不支持。&lt;/p>
&lt;p>相对其他协议而言，RTMP协议初次建立连接的时候握手过程过于复杂（底层基于TCP，这里说的是RTMP协议本身的交互），视不同的网络状况会带来给首开带来100ms以上的延迟。&lt;/p>
&lt;p>基于RTMP的直播一般内容延迟：在2~5秒。&lt;/p>
&lt;p>缺点：不是HTTP。&lt;/p>
&lt;p>Real Time Messaging Protocol（实时消息传送协议）&lt;/p>
&lt;ol>
&lt;li>工作在TCP之上的明文协议，使用端口1935；&lt;/li>
&lt;li>RTMPT封装在HTTP请求之中，可穿越防火墙；&lt;/li>
&lt;li>RTMPS类似RTMPT，但使用的是HTTPS连接；&lt;/li>
&lt;/ol>
&lt;p>协议分类&lt;/p>
&lt;ul>
&lt;li>RTMP：协议工作在TCP之上，是应用层协议，默认的端口是1935。&lt;/li>
&lt;li>RTMPE：在RTMP的基础上增加了加密功能。&lt;/li>
&lt;li>RTMPT：工作在HTTP之上，默认端口是80或443，可穿透防火墙。&lt;/li>
&lt;li>RTMPS：类似RTMPT，增加了TLS/SSL的安全功能。&lt;/li>
&lt;li>RTMFP：为RTMP协议的UDP版本。&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/43034332" target="_blank" rel="noopener"
>参考&lt;/a>&lt;/p>
&lt;h3 id="hdlhttp-flv">HDL（HTTP-FLV）&lt;/h3>
&lt;p>不担心被Adobe的专利绑架。&lt;/p>
&lt;p>内容延迟同样可以做到2~5秒，打开速度更快，因为HTTP本身没有复杂的状态交互。所以从延迟角度来看，HTTP-FLV要优于RTMP。&lt;/p>
&lt;h3 id="hls">HLS&lt;/h3>
&lt;p>有浏览器即可，所以流行度很高。&lt;/p>
&lt;p>HLS是Apple推出的直播协议，是通过视频流切片成文件片段来直播的。客户端首先会请求一个m3u8文件，里面会有不同码率的流，或者直接是ts文件列表，通过给出的ts文件地址去依次播放。在直播的时候，客户端会不断请求m3u8文件，检查ts列表是否有新的ts切片。&lt;/p>
&lt;p>这种方式直播的主要弊端就是延迟过大，最小延时为ts单个文件的时长。&lt;/p>
&lt;h3 id="dash">DASH&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Dynamic Adaptive Streaming over HTTP&lt;/strong> (&lt;strong>DASH&lt;/strong>), also known as &lt;strong>MPEG-DASH&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>DASH实际工作原理和hls一样的，只不过不是mpegts文件，dash可以支持多种切片文件，比如mp4切片。当为mp4切片，客户端直接可用js控制利用html5直接播放。同样的，dash有延时。&lt;/p>
&lt;h3 id="rtp">RTP&lt;/h3>
&lt;p>实际应用场景下经常需要RTCP（RTP Control Protocol）配合来使用，可以简单理解为RTCP传输交互控制的信令，RTP传输实际的媒体数据。&lt;/p>
&lt;p>&lt;strong>RTP在视频监控、视频会议、IP电话上有广泛的应用&lt;/strong>，因为视频会议、IP电话的一个重要的使用体验：内容实时性强。&lt;/p>
&lt;p>RTP和它们有一个重要的区别就是默认是使用UDP协议来传输数据。&lt;/p>
&lt;p>各大CDN厂商没有支持基于RTP直播的，所以目前国内主流还是RTMP或HTTP-FLV。&lt;/p>
&lt;h3 id="自适性串流">自适性串流&lt;/h3>
&lt;blockquote>
&lt;p>自适性串流（英语：ABS, adaptive bitrate streaming），是一种在&lt;a class="link" href="https://zh.wikipedia.org/wiki/%e7%94%b5%e8%84%91%e7%bd%91%e7%bb%9c" target="_blank" rel="noopener"
>电脑网络&lt;/a>使用的一种技术&lt;a class="link" href="https://zh.wikipedia.org/wiki/%e6%b5%81%e5%aa%92%e4%bd%93" target="_blank" rel="noopener"
>串流技术&lt;/a>。过去的流媒体技术多使用 &lt;a class="link" href="https://zh.wikipedia.org/wiki/RTP" target="_blank" rel="noopener"
>RTP&lt;/a>/&lt;a class="link" href="https://zh.wikipedia.org/wiki/RTSP" target="_blank" rel="noopener"
>RTSP&lt;/a>，但现在的技术则大多基于 HTTP，并为更高效在大型分布式HTTP网络（例如互联网）分发而设计。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>流媒体客户端首先获取所有码率的切片索引信息。&lt;/li>
&lt;li>一开始，客户端先请求最低码率的串流。如果客户端判断下载速度比当前码率的切片串流快，它就去请求下一个更高码率的串流。&lt;/li>
&lt;li>随着播放的进行，如果客户端发现下载速度比当前码率的切片串流慢，转而请求下一个较低码率的串流。&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E8%87%AA%E9%81%A9%E6%80%A7%E4%B8%B2%E6%B5%81" target="_blank" rel="noopener"
>Wiki&lt;/a>&lt;/p>
&lt;p>切片大小和具体实现密切相关，不过一般都在2～10秒之间。每个切片由一个完整的&lt;a class="link" href="https://zh.wikipedia.org/wiki/GOP" target="_blank" rel="noopener"
>GOP&lt;/a>序列组成。&lt;/p>
&lt;h4 id="实现">实现&lt;/h4>
&lt;ul>
&lt;li>MPEG-DASH&lt;/li>
&lt;li>Adobe HTTP Dynamic Streaming (HDS)&lt;/li>
&lt;li>Apple HTTP Live Streaming (HLS)&lt;/li>
&lt;li>Microsoft Smooth Streaming (MSS)&lt;/li>
&lt;/ul>
&lt;p>Apple 和微软基于 HTTP。&lt;/p>
&lt;h3 id="其它">其它&lt;/h3>
&lt;p>各种传输协议简介&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/69184805" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/69184805&lt;/a>&lt;/p>
&lt;h2 id="基础知识">基础知识&lt;/h2>
&lt;h3 id="帧率">帧率&lt;/h3>
&lt;p>Frame Rate&lt;/p>
&lt;p>定义：&lt;/p>
&lt;p>单位：fps（frame per second）或Hz&lt;/p>
&lt;p>指标：30fps是可以接受的。&lt;/p>
&lt;h3 id="刷新率">刷新率&lt;/h3>
&lt;p>&lt;strong>屏幕&lt;/strong>每秒刷新画面的次数。&lt;/p>
&lt;p>单位：Hz&lt;/p>
&lt;p>指标：80Hz以上就可以消除图像闪烁和抖动感，眼睛也不容易疲劳。&lt;/p>
&lt;h3 id="码率">码率&lt;/h3>
&lt;p>也称比特率（bit rate）。&lt;/p>
&lt;p>定义：单位时间播放的媒体的比特数量。&lt;/p>
&lt;p>单位：b/s&lt;/p>
&lt;p>公式：码率=文件大小(b)/时长(s)&lt;/p>
&lt;p>用途：衡量消耗的带宽。&lt;/p>
&lt;p>&lt;a class="link" href="https://support.google.com/youtube/answer/1722171?hl=zh-Hans" target="_blank" rel="noopener"
>参考Youtube&lt;/a>&lt;/p>
&lt;h3 id="体积-带宽的控制">体积-带宽的控制&lt;/h3>
&lt;p>在使用 OBS 录屏时，我们希望视频效果既清晰体积又小，所以这里就需要合理的设置分辨率、帧率、码率。&lt;/p>
&lt;p>&lt;strong>码率&lt;/strong> 则是单位时间数据的位数，一般使用 Kbps 做单位。&lt;/p>
&lt;p>我的录屏使用的是 1920x1080 分辨率，帧率设置为 30，那么码率可以设置为：4860&lt;/p>
&lt;p>&lt;img src="https://zhangzw.com/posts/20200204/201604211504013279.jpg"
loading="lazy"
alt="201604211504013279"
>&lt;/p>
&lt;p>各大平台默认1500&lt;/p>
&lt;p>&lt;a class="link" href="https://www.bilibili.com/read/cv395368/" target="_blank" rel="noopener"
>参考1&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.zhihu.com/question/49460691" target="_blank" rel="noopener"
>参考2&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-6242f573451cbfed293ff6ba9543de9f_1440w.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>手机&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-24d825761d500ae9a0bf42e4c7a32c88_1440w.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>Youtube&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">类型&lt;/th>
&lt;th style="text-align:left">视频比特率（标准帧速率） （24、25、30）&lt;/th>
&lt;th style="text-align:left">视频比特率（高帧速率） （48、50、60）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">2160p (4k)&lt;/td>
&lt;td style="text-align:left">35-45 Mbps&lt;/td>
&lt;td style="text-align:left">53-68 Mbps&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">1440p (2k)&lt;/td>
&lt;td style="text-align:left">16 Mbps&lt;/td>
&lt;td style="text-align:left">24 Mbps&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">1080p&lt;/td>
&lt;td style="text-align:left">35-45 Mbps??&lt;/td>
&lt;td style="text-align:left">12 Mbps&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">720p&lt;/td>
&lt;td style="text-align:left">5 Mbps&lt;/td>
&lt;td style="text-align:left">7.5 Mbps&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">480p&lt;/td>
&lt;td style="text-align:left">2.5 Mbps&lt;/td>
&lt;td style="text-align:left">4 Mbps&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">360p&lt;/td>
&lt;td style="text-align:left">1 Mbps&lt;/td>
&lt;td style="text-align:left">1.5 Mbps&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;a class="link" href="https://support.google.com/youtube/answer/1722171?hl=zh-Hans" target="_blank" rel="noopener"
>参考3&lt;/a>&lt;/p>
&lt;h3 id="色彩空间">色彩空间&lt;/h3>
&lt;ul>
&lt;li>SDR（标准动态范围 Standard Dynamic Range）：BT.709&lt;/li>
&lt;li>HDR（高动态范围 High Dynamic Range）：视频使用BT.2020&lt;/li>
&lt;/ul>
&lt;h3 id="音频参数">音频参数&lt;/h3>
&lt;h4 id="采样率">采样率&lt;/h4>
&lt;ul>
&lt;li>8kHz：电话&lt;/li>
&lt;li>22.05kHz：无线广播&lt;/li>
&lt;li>44.1kHz：CD和VCD&lt;/li>
&lt;li>48kHz：DVD、数字电视&lt;/li>
&lt;li>96kHz：蓝光&lt;/li>
&lt;/ul>
&lt;p>量化精度：CD级16bit，DVD24bit。&lt;/p>
&lt;h2 id="像素">像素&lt;/h2>
&lt;h3 id="颜色空间">颜色空间&lt;/h3>
&lt;ul>
&lt;li>RGB&lt;/li>
&lt;li>HSV&lt;/li>
&lt;li>YUV&lt;/li>
&lt;/ul>
&lt;h2 id="编码">编码&lt;/h2>
&lt;h3 id="视频编码">视频编码&lt;/h3>
&lt;p>两个系列：&lt;/p>
&lt;ul>
&lt;li>H.26X：H263、H264、HEVC（H265）&lt;/li>
&lt;li>MPEG：MPEG-2 、MPEG-4 等&lt;/li>
&lt;/ul>
&lt;h3 id="视频解码">视频解码&lt;/h3>
&lt;p>ffmpeg 使用的是软解码，也即是纯 CPU 解码；&lt;/p>
&lt;p>而使用平台的 MediaCodec 播放的是硬解码，也就是支持 GPU 协助。&lt;/p>
&lt;h3 id="软解码">软解码&lt;/h3>
&lt;p>Andorid、iOS播放器都使用软解码方案，经过我们和大量客户的测试以及总结，虽然牺牲了功耗，但是在部分细节方面表现会较优，且可控性强，兼容性也强，出错情况少，推荐使用。&lt;/p>
&lt;h3 id="音频解码">音频解码&lt;/h3>
&lt;h4 id="g711">G.711&lt;/h4>
&lt;p>2008年ITU-T定制出来的一套语音压缩标准。&lt;/p>
&lt;p>两个压缩算法（编码方式）：&lt;/p>
&lt;ul>
&lt;li>A-law：欧洲和世界其他地区，特别设计用来方便计算机处理的&lt;/li>
&lt;li>μ-law：北美和日本&lt;/li>
&lt;/ul>
&lt;p>用途：主要用于电话&lt;/p>
&lt;ul>
&lt;li>采样率：8kHz&lt;/li>
&lt;li>信息量-带宽-体积：64kbps／channel = 8bit*8kHz&lt;/li>
&lt;li>理论延迟：0.125msec&lt;/li>
&lt;li>品质：MOS值4.10&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="https://zh.wikipedia.org/wiki/G.711" target="_blank" rel="noopener"
>Wiki&lt;/a>&lt;/p>
&lt;h2 id="封装协议">封装协议&lt;/h2>
&lt;p>视频&lt;/p>
&lt;p>MP4 、AVI 、RMVB 、MKV、TS、FLV&lt;/p>
&lt;p>音频&lt;/p>
&lt;p>AAC 也是有损压缩，但是又有分有 LC-AAC、HE-AAC等。&lt;/p>
&lt;h2 id="知识点">知识点&lt;/h2>
&lt;h3 id="streaming和progressive-download">Streaming和Progressive Download&lt;/h3>
&lt;p>总体&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Streaming是实时流&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Progressive Download是分片后的分段式下载缓冲&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Streaming不需要缓存实体文件，并且可以从任意时间点开始播放。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Progressive Download需要将预下载文件存放到本地存储，并且默认情况下，播放器不会自动删除缓存文件。但Progressive Download无法精确到帧开始播放，只能从流媒体文件的切片点开始。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>网络&lt;/p>
&lt;p>Progressive Download由于基于HTTP协议，所以出现丢包会重新传输数据。&lt;/p>
&lt;p>Streaming对网络的利用率更高，而Progressive Download由于需要校验以及其他一些协议上的原因，网络利用率较低。&lt;/p>
&lt;p>一个注重高时效性，高网络利用率，另一个注重数据可靠性和协议通用性/兼容性。&lt;/p>
&lt;p>Streaming的协议&lt;/p>
&lt;ul>
&lt;li>RTP/RTSP&lt;/li>
&lt;li>Sliverlight&lt;/li>
&lt;li>MMS&lt;/li>
&lt;/ul>
&lt;p>Progressive Download的协议&lt;/p>
&lt;ul>
&lt;li>HLS&lt;/li>
&lt;li>TS/FLV Over HTTP&lt;/li>
&lt;/ul>
&lt;h3 id="gop">GOP&lt;/h3>
&lt;p>&lt;strong>GOP（Group Of Picture）就是两个 I 帧之间的距离，一般 GOP 设置得越大，画面的效果就会越好，到那时需要解码的时间就会越长。&lt;/strong> 所以如果码率固定而 GOP 值越大，P/B帧 数量会越多，画面质量就会越高&lt;/p>
&lt;p>服务端提供转&lt;/p>
&lt;p>格式与转码率&lt;/p>
&lt;p>因为在服务端判断视频格式并转码可以规范编码统一，这能够减少客户端端因为编解码失败无法播放的问题。&lt;/p>
&lt;p>提供同一视频不同码率的链接，可以在不同手机型号和系统上能够拥有更好的播放体验，减少前面说过的因为码率太高出现音视频不同步或者卡顿的问题。&lt;/p>
&lt;p>类似功能在阿里云和腾讯云都支持。&lt;/p>
&lt;p>封装协议、视频编码、音频编码格式&lt;/p>
&lt;p>3、在网络播放中存在很多场景，比如播放过程中网络环境出现变化，是从 4G 转化为 Wifi 还是从 Wifi 转到了 4G 的场景 ，这里面涉及到两个点：&lt;strong>第一是网络环境发生改变，那么原本的拉流通道其实已经断开，这时候需要重新启动一个新的连接来替换旧的播放内核，才能实现继续播放；第二就是 Wifi 到 4G 之间的环境发生改变时，需要给用户提示并确定是否执行后续操作。&lt;/strong>&lt;/p>
&lt;p>muxer&lt;/p>
&lt;p>muxer是指合并文件，即将视频文件、音频文件和字幕文件合并为某一个视频格式。比如把rmvb格式的视频，mp3格式的音频文件以及srt格式的字幕文件，合并成为一个新的mp4或者mkv格式的文件。&lt;/p>
&lt;img src="https://pic4.zhimg.com/80/v2-ace3965194827186f294ae05b975ed3b_1440w.jpg" alt="img" />
&lt;p>demuxer&lt;/p>
&lt;p>demuxer是muxer的逆过程，就是把合成的文件中提取出不同的格式文件。&lt;/p>
&lt;p>&lt;img src="https://pic2.zhimg.com/80/v2-55ce78878025203808eef4911b88a131_1440w.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>&lt;strong>播放器原理&lt;/strong>&lt;/p>
&lt;p>视频播放原理：（mp4、flv）-&amp;gt; 解封装 -&amp;gt; （mp3/aac、h264/h265）-&amp;gt; 解码 -&amp;gt; （pcm、yuv）-&amp;gt; 音视频同步 -&amp;gt; 渲染播放&lt;/p>
&lt;p>音视频同步：&lt;/p>
&lt;ul>
&lt;li>选择参考时钟源：音频时间戳、视频时间戳和外部时间三者选择一个作为参考时钟源（一般选择音频，因为人对音频更敏感，ijk 默认也是音频）&lt;/li>
&lt;li>通过等待或丢帧将视频流与参考时钟源对齐，实现同步&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>IjkPlayer 原理&lt;/strong>&lt;/p>
&lt;p>集成了 MediaPlayer、ExoPlayer 和 IjkPlayer 三种实现，其中 IjkPlayer 基于 FFmpeg 的 ffplay&lt;/p>
&lt;p>音频输出方式：AudioTrack、OpenSL ES；视频输出方式：NativeWindow、OpenGL ES&lt;/p>
&lt;h2 id="工具">工具&lt;/h2>
&lt;h3 id="mediainfo">MediaInfo&lt;/h3>
&lt;p>&lt;a class="link" href="https://mediaarea.net/en/MediaInfo/Download" target="_blank" rel="noopener"
>Windows版本&lt;/a>比较强大&lt;/p>
&lt;p>&lt;img src="https://i0.hdslb.com/bfs/article/d7c953442dd853c6770429bd57bb93098cb7722a.png@1220w_896h.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;p>&lt;a class="link" href="https://juejin.im/post/5e12fe306fb9a0481467d399" target="_blank" rel="noopener"
>移动开发者的必知音视频基础知识&lt;/a>&lt;/p></description></item></channel></rss>