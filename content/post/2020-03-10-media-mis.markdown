---
layout: post
title:  "音视频基础和思考"
date:   2020-03-06 07:58:58 +0800
categories: media
---



## 总体层次



![img](https://img-blog.csdn.net/20160118002918690)





## 直播vs点播



云直播（LVB）、云点播（VOD）







## 传输协议





### 对比



内容延迟：

RTP > RTMP和HDL > HLS

DASH不清楚



| 协议         | HDL(HTTP-FLV)                 | RTMP    | HLS            | DASH                        |
| ------------ | ----------------------------- | ------- | -------------- | --------------------------- |
| 传输方式     | http流                        | tcp流   | http           | http                        |
| 视频封装格式 | flv                           | flv tag | Ts文件         | Mp4 3gp webm 切片           |
| 延时         | 低                            | 低      | 高             | 高                          |
| 数据分段     | 连续流                        | 连续流  | 切片文件       | 切片文件                    |
| Html5播放    | 可通过html5解封包播放(flv.js) | 不支持  | 可通过(hls.js) | 直接播放或者html5解封包播放 |



| 直播协议    | 优点                   | 缺点                 | 播放延迟   |
| ----------- | ---------------------- | -------------------- | ---------- |
| FLV         | 成熟度高、高并发无压力 | 需集成  SDK 才能播放 | 2s  - 3s   |
| RTMP        | 优质线路下理论延迟最低 | 高并发情况下表现不佳 | 1s  - 3s   |
| HLS（m3u8） | 手机浏览器支持度高     | 延迟非常高           | 10s  - 30s |



#### HDL vs RTMP

这两个协议实际上传输数据是一样的，**数据都是flv文件的tag**。

http_flv是一个无限大的http流的文件，相比rtmp就只能直播，而rtmp还可以推流和更多的操作。

但是http有个好处，就是是以80http通信的，穿透性强，而且rtmp是非开放协议。

这两个协议是如今直播平台主选的直播方式，主要原因就是延时极低。



[参考](https://www.cnblogs.com/luconsole/p/6079534.html)



### RTMP

是Adobe的专利协议，现在大部分国外的CDN已不支持。



相对其他协议而言，RTMP协议初次建立连接的时候握手过程过于复杂（底层基于TCP，这里说的是RTMP协议本身的交互），视不同的网络状况会带来给首开带来100ms以上的延迟。

基于RTMP的直播一般内容延迟：在2~5秒。



缺点：不是HTTP。



Real Time Messaging Protocol（实时消息传送协议）

1. 工作在TCP之上的明文协议，使用端口1935；
2. RTMPT封装在HTTP请求之中，可穿越防火墙；
3. RTMPS类似RTMPT，但使用的是HTTPS连接；



协议分类

- RTMP：协议工作在TCP之上，是应用层协议，默认的端口是1935。
- RTMPE：在RTMP的基础上增加了加密功能。
- RTMPT：工作在HTTP之上，默认端口是80或443，可穿透防火墙。
- RTMPS：类似RTMPT，增加了TLS/SSL的安全功能。
- RTMFP：为RTMP协议的UDP版本。



[参考](https://zhuanlan.zhihu.com/p/43034332
)





### HDL（HTTP-FLV）



不担心被Adobe的专利绑架。

内容延迟同样可以做到2~5秒，打开速度更快，因为HTTP本身没有复杂的状态交互。所以从延迟角度来看，HTTP-FLV要优于RTMP。





### HLS

有浏览器即可，所以流行度很高。

HLS是Apple推出的直播协议，是通过视频流切片成文件片段来直播的。客户端首先会请求一个m3u8文件，里面会有不同码率的流，或者直接是ts文件列表，通过给出的ts文件地址去依次播放。在直播的时候，客户端会不断请求m3u8文件，检查ts列表是否有新的ts切片。

这种方式直播的主要弊端就是延迟过大，最小延时为ts单个文件的时长。



### DASH

> **Dynamic Adaptive Streaming over HTTP** (**DASH**), also known as **MPEG-DASH**

DASH实际工作原理和hls一样的，只不过不是mpegts文件，dash可以支持多种切片文件，比如mp4切片。当为mp4切片，客户端直接可用js控制利用html5直接播放。同样的，dash有延时。

 



### RTP

实际应用场景下经常需要RTCP（RTP Control Protocol）配合来使用，可以简单理解为RTCP传输交互控制的信令，RTP传输实际的媒体数据。

**RTP在视频监控、视频会议、IP电话上有广泛的应用**，因为视频会议、IP电话的一个重要的使用体验：内容实时性强。



RTP和它们有一个重要的区别就是默认是使用UDP协议来传输数据。



各大CDN厂商没有支持基于RTP直播的，所以目前国内主流还是RTMP或HTTP-FLV。





### 自适性串流

> 自适性串流（英语：ABS, adaptive bitrate streaming），是一种在[电脑网络](https://zh.wikipedia.org/wiki/电脑网络)使用的一种技术[串流技术](https://zh.wikipedia.org/wiki/流媒体)。过去的流媒体技术多使用 [RTP](https://zh.wikipedia.org/wiki/RTP)/[RTSP](https://zh.wikipedia.org/wiki/RTSP)，但现在的技术则大多基于 HTTP，并为更高效在大型分布式HTTP网络（例如互联网）分发而设计。



- 流媒体客户端首先获取所有码率的切片索引信息。
- 一开始，客户端先请求最低码率的串流。如果客户端判断下载速度比当前码率的切片串流快，它就去请求下一个更高码率的串流。
- 随着播放的进行，如果客户端发现下载速度比当前码率的切片串流慢，转而请求下一个较低码率的串流。



[Wiki](https://zh.wikipedia.org/wiki/%E8%87%AA%E9%81%A9%E6%80%A7%E4%B8%B2%E6%B5%81)



切片大小和具体实现密切相关，不过一般都在2～10秒之间。每个切片由一个完整的[GOP](https://zh.wikipedia.org/wiki/GOP)序列组成。





#### 实现

- MPEG-DASH
- Adobe HTTP Dynamic Streaming (HDS)
- Apple HTTP Live Streaming (HLS)
- Microsoft Smooth Streaming (MSS)

Apple 和微软基于 HTTP。







### 其它

各种传输协议简介

https://zhuanlan.zhihu.com/p/69184805



## 基础知识



### 帧率

Frame Rate

定义：

单位：fps（frame per second）或Hz

指标：30fps是可以接受的。

 

### 刷新率

**屏幕**每秒刷新画面的次数。

单位：Hz

指标：80Hz以上就可以消除图像闪烁和抖动感，眼睛也不容易疲劳。



### 码率

也称比特率（bit rate）。

定义：单位时间播放的媒体的比特数量。

单位：b/s

公式：码率=文件大小(b)/时长(s)

用途：衡量消耗的带宽。



[参考Youtube](https://support.google.com/youtube/answer/1722171?hl=zh-Hans)



### 体积-带宽的控制

在使用 OBS 录屏时，我们希望视频效果既清晰体积又小，所以这里就需要合理的设置分辨率、帧率、码率。

**码率** 则是单位时间数据的位数，一般使用 Kbps 做单位。

我的录屏使用的是 1920x1080 分辨率，帧率设置为 30，那么码率可以设置为：4860



![201604211504013279](https://zhangzw.com/posts/20200204/201604211504013279.jpg)







各大平台默认1500

[参考1](https://www.bilibili.com/read/cv395368/)

[参考2](https://www.zhihu.com/question/49460691)

![img](https://pic4.zhimg.com/80/v2-6242f573451cbfed293ff6ba9543de9f_1440w.jpg)

手机

![img](https://pic3.zhimg.com/80/v2-24d825761d500ae9a0bf42e4c7a32c88_1440w.jpg)

Youtube

| 类型       | 视频比特率（标准帧速率） （24、25、30） | 视频比特率（高帧速率） （48、50、60） |
| :--------- | :-------------------------------------- | :------------------------------------ |
| 2160p (4k) | 35-45 Mbps                              | 53-68 Mbps                            |
| 1440p (2k) | 16 Mbps                                 | 24 Mbps                               |
| 1080p      | 35-45 Mbps??                            | 12 Mbps                               |
| 720p       | 5 Mbps                                  | 7.5 Mbps                              |
| 480p       | 2.5 Mbps                                | 4 Mbps                                |
| 360p       | 1 Mbps                                  | 1.5 Mbps                              |

[参考3](https://support.google.com/youtube/answer/1722171?hl=zh-Hans)



### 色彩空间



- SDR（标准动态范围 Standard Dynamic Range）：BT.709
- HDR（高动态范围 High Dynamic Range）：视频使用BT.2020



### 音频参数

#### 采样率

- 8kHz：电话
- 22.05kHz：无线广播
- 44.1kHz：CD和VCD
- 48kHz：DVD、数字电视
- 96kHz：蓝光



量化精度：CD级16bit，DVD24bit。





## 像素



### 颜色空间

- RGB
- HSV
- YUV





## 编码



### 视频编码

两个系列：

- H.26X：H263、H264、HEVC（H265）
- MPEG：MPEG-2 、MPEG-4 等



### 视频解码

ffmpeg 使用的是软解码，也即是纯 CPU 解码；

而使用平台的 MediaCodec 播放的是硬解码，也就是支持 GPU 协助。



### 软解码

Andorid、iOS播放器都使用软解码方案，经过我们和大量客户的测试以及总结，虽然牺牲了功耗，但是在部分细节方面表现会较优，且可控性强，兼容性也强，出错情况少，推荐使用。



### 音频解码



#### G.711

2008年ITU-T定制出来的一套语音压缩标准。



两个压缩算法（编码方式）：

- A-law：欧洲和世界其他地区，特别设计用来方便计算机处理的
- μ-law：北美和日本



用途：主要用于电话



- 采样率：8kHz
- 信息量-带宽-体积：64kbps／channel = 8bit*8kHz
- 理论延迟：0.125msec
- 品质：MOS值4.10



[Wiki](https://zh.wikipedia.org/wiki/G.711)





## 封装协议



视频

MP4 、AVI 、RMVB 、MKV、TS、FLV



音频 

AAC 也是有损压缩，但是又有分有 LC-AAC、HE-AAC等。





## 知识点



### Streaming和Progressive Download

总体

- Streaming是实时流

- Progressive Download是分片后的分段式下载缓冲





- Streaming不需要缓存实体文件，并且可以从任意时间点开始播放。
- Progressive Download需要将预下载文件存放到本地存储，并且默认情况下，播放器不会自动删除缓存文件。但Progressive Download无法精确到帧开始播放，只能从流媒体文件的切片点开始。



网络

Progressive Download由于基于HTTP协议，所以出现丢包会重新传输数据。

Streaming对网络的利用率更高，而Progressive Download由于需要校验以及其他一些协议上的原因，网络利用率较低。

一个注重高时效性，高网络利用率，另一个注重数据可靠性和协议通用性/兼容性。



Streaming的协议

- RTP/RTSP
- Sliverlight
- MMS



Progressive Download的协议

- HLS
- TS/FLV Over HTTP



### GOP

**GOP（Group Of Picture）就是两个 I 帧之间的距离，一般 GOP 设置得越大，画面的效果就会越好，到那时需要解码的时间就会越长。** 所以如果码率固定而 GOP 值越大，P/B帧 数量会越多，画面质量就会越高









服务端提供转

格式与转码率

因为在服务端判断视频格式并转码可以规范编码统一，这能够减少客户端端因为编解码失败无法播放的问题。

提供同一视频不同码率的链接，可以在不同手机型号和系统上能够拥有更好的播放体验，减少前面说过的因为码率太高出现音视频不同步或者卡顿的问题。



类似功能在阿里云和腾讯云都支持。



封装协议、视频编码、音频编码格式





3、在网络播放中存在很多场景，比如播放过程中网络环境出现变化，是从 4G 转化为 Wifi 还是从 Wifi 转到了 4G 的场景 ，这里面涉及到两个点：**第一是网络环境发生改变，那么原本的拉流通道其实已经断开，这时候需要重新启动一个新的连接来替换旧的播放内核，才能实现继续播放；第二就是 Wifi 到 4G 之间的环境发生改变时，需要给用户提示并确定是否执行后续操作。**





muxer

muxer是指合并文件，即将视频文件、音频文件和字幕文件合并为某一个视频格式。比如把rmvb格式的视频，mp3格式的音频文件以及srt格式的字幕文件，合并成为一个新的mp4或者mkv格式的文件。

<img src="https://pic4.zhimg.com/80/v2-ace3965194827186f294ae05b975ed3b_1440w.jpg" alt="img"  />

demuxer

demuxer是muxer的逆过程，就是把合成的文件中提取出不同的格式文件。

![img](https://pic2.zhimg.com/80/v2-55ce78878025203808eef4911b88a131_1440w.jpg)







**播放器原理**

视频播放原理：（mp4、flv）-> 解封装 -> （mp3/aac、h264/h265）-> 解码 -> （pcm、yuv）-> 音视频同步 -> 渲染播放

音视频同步：

- 选择参考时钟源：音频时间戳、视频时间戳和外部时间三者选择一个作为参考时钟源（一般选择音频，因为人对音频更敏感，ijk 默认也是音频）
- 通过等待或丢帧将视频流与参考时钟源对齐，实现同步





**IjkPlayer 原理**

集成了 MediaPlayer、ExoPlayer 和 IjkPlayer 三种实现，其中 IjkPlayer 基于 FFmpeg 的 ffplay

音频输出方式：AudioTrack、OpenSL ES；视频输出方式：NativeWindow、OpenGL ES





## 工具



### MediaInfo

[Windows版本](https://mediaarea.net/en/MediaInfo/Download)比较强大

![img](https://i0.hdslb.com/bfs/article/d7c953442dd853c6770429bd57bb93098cb7722a.png@1220w_896h.jpg)





## 参考



[移动开发者的必知音视频基础知识](https://juejin.im/post/5e12fe306fb9a0481467d399)